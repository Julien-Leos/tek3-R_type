Network Working Group         L. Sanchez S. Provost L. Julien R. Dakiche
Request for Comments: 6969                                    R. Dakiche
Author                                                        R. Dakiche
Organization                                                     Epitech
Date                                                       Novembre 2019
Category: Informational                                    Novembre 2019


                    R-type Communication Protocol



Status of this Memo

   This memo provides information for the R-type Communication Protocol.
   Distribution of this memo is unlimited.



Copyright Notice

   Copyright (C) Epitech (2019). All Rights Reserved.



Table of Contents

   1.   R-type Communication Protocol Basics . . . . . . . . . . . . 1
   2.   Communication structure  . . . . . . . . . . . . . . . . . . 1
   3.   In-Lobby communication . . . . . . . . . . . . . . . . . . . 2
   4.   In-Game communication  . . . . . . . . . . . . . . . . . . . 3
   5.   Contact  . . . . . . . . . . . . . . . . . . . . . . . . . . 3
   6.   Authors' Addresse  . . . . . . . . . . . . . . . . . . . . . 3
   7.   Full Copyright Statement . . . . . . . . . . . . . . . . . . 4



1.  R-type Communication Protocol Basics

    The R-type Communication Protocol is the protocol developed by
the Diavlo IV team at Epitech for the R-type project.
    It is used to send and receive informations between the server
and the client during the three steps of programm life detailed below.



2. Communication structure

    All the packets sent by both of the server or client are the sames.

    This is the struct representing all the packets sent :



Dakiche                      Informational                      [Page 1]

RFC 6969             R-type Communication Protocol         Novembre 2019


    typedef struct protocol_t {
        unsigned char opcode;
        unsigned int clientId;
        std::size_t data;
        object_t object;
    } protocol_t;

    Opcode : MUST be detailed in every packets sent.
It defines the operation that must be executed.

    ClientId : Must be detailed if the client send the packet.
It is the ID of the client that sent the packet.

    Data : MAY be detailed. The use cases are detailed below.

    Object : Must be detailed for In-Game packets only.
The fields of the objtect structure are detailed below and
MUST all be detailed for in-game communications.

    typedef struct object_s {
        unsigned char type;
        bool isCollide;
        vector2f pos;
        vector2f velocity;
    } object_t;

3. In-Lobby communication

    All the In-Lobby communications follows the following schema.

              ----------        TCP        -----------------
              | Client | <---------------> | Server Lobby  |
              ----------                   | (Main thread) |
                                           -----------------

    When a client attempt eo connect on the server, the server send
a specific packet to identify the client by giving him an ID.

  Opcode |     Name     | Direction |    Data    | Object | Text
    001  |     Init     |  S --> C  | Client ID  |        |


    The second step is the connection and disconnection of the user.

  Opcode |     Name     | Direction |    Data    | Object | Text
    011  |   Connect    |  C --> S  |            |        | Client name
    011  |   Connect    |  S --> C  | Client ID  |        | Client name
    012  |  Disconnect  |  C --> S  |            |        |
    012  |  Disconnect  |  S --> C  |            |        |



Dakiche                      Informational                      [Page 2]

RFC 6969             R-type Communication Protocol         Novembre 2019


    After the user is logged-in, he haves to join or create a room
in order to play. This is the step detailed below.

  Opcode |     Name     | Direction |    Data    | Object | Text
    021  |    Create    |  C --> S  |            |        | Room name
    021  |    Create    |  S --> S  |  Room ID   |        | Room name
    022  |     Join     |  C --> S  |  Room ID   |        |
    022  |     Join     |  S --> C  | Client ID  |        | Client Name
    023  |    Leave     |  C --> S  |            |        |
    023  |    Leave     |  S --> C  | Client ID  |        |
    024  |   Delete     |  S --> C  |  Room ID   |        |
    024  |     Get      |  S --> C  |  Room ID   |        | Room name
    026  | Player Ready |  C --> S  |            |        |
    026  | Player Ready |  S --> C  | Client ID  |        |


    In order to join a game or to leave it the two following packets
are user.

  Opcode |     Name     | Direction |    Data    | Object | Text
    031  |    Start     |  S --> C  |            |        |
    032  |     End      |  S --> C  |            |        |


4. In-Game communication

    All the In-Game communications follows the following schema.

              ----------        UDP         ------------------
              | Client | <----------------> |  Server Game   |
              ----------                    | (Child thread) |
                                            ------------------


    To manage the entities displayed on the client, the following
packets are used.

  Opcode |     Name     | Direction |    Data    | Object | Text
    101  |    Create    |  S --> C  | Client ID  |   X    |
    102  |    Update    |  S --> C  | Client ID  |   X    |
    103  |    Delete    |  S --> C  | Client ID  |        |

    To inform the server that the user did an action, the input
packet is used.
  Opcode |     Name     | Direction |    Data    | Object | Text
    110  |    Input     |  C --> S  | Input ID   |        |






Dakiche                      Informational                      [Page 3]

RFC 6969             R-type Communication Protocol         Novembre 2019


5.  Contact

   To contact the R-type Communication Protocol editor send
an email message to:

         "raphael2.dakiche@epitech.eu".




6.  Authors' Addresses

   Dakiche Raphael
   Epitech
   0 Rue de l'echec

   Phone: +33 6 52 53 80 28
   EMail: raphael2.dakiche@epitech.eu



7.  Full Copyright Statement

   Copyright (C) Epitech (2019).  All Rights Reserved.

   This document and translations of it may be copied and furnished to
   others, and derivative works that comment on or otherwise explain it
   or assist in its implmentation may be prepared, copied, published and
   distributed, in whole or in part, without restriction of any kind,
   provided that the above copyright notice and this paragraph are
   included on all such copies and derivative works.  However, this
   document itself may not be modified in any way, such as by removing
   the copyright notice or references to Epitech or other
   IONIS organizations, except as needed for the purpose of
   developing Internet standards in which case the procedures for
   copyrights defined in the Internet Standards process must be
   followed, or as required to translate it into languages other than
   English.

   The limited permissions granted above are perpetual and will not be
   revoked by Epitech or its successors or assigns.












Dakiche                      Informational                      [Page 3]
